productNames = ['AllB', 'AllF', 'AppJ', 'CorF', 'CorP', 'Crac', 'Cris', 'Froo', 'FroF', 'FrMW', 'FruB', 'JRCN', 'JRFN', 'MuCB', 'Nut&', 'NGAR', 'NutW', 'Prod', 'RaBr', 'Rais', 'RiKr', 'Smac', 'Spec']

kellogMatrix = [
    [0.1818, 0.6, 0.3333, 0.8125, 0.6429, 0.0000, 0.3333, 1.0, 0.9677, 0.0],
    [0.0000,  0.6, 0.0000, 0.4375, 1.0000, 0.0667, 0.0000, 1.0, 1.0000, 0.0],
    [0.5455,  0.2, 0.0000, 0.3906, 0.0714, 0.2667, 0.9333, 0.5, 0.0323, 0.0],
    [0.4545,  0.2, 0.0000, 0.9063, 0.0714, 0.9333, 0.1333, 0.0, 0.0484, 0.0],
    [0.5455,  0.0, 0.0000, 0.2813, 0.0714, 0.4000, 0.8000, 0.5, 0.0000, 0.0],
    [0.5455,  0.4, 1.0000, 0.4375, 0.2857, 0.2000, 0.4667, 1.0, 0.4516, 0.0],
    [0.5455,  0.2, 0.0000, 0.6875, 0.0714, 0.9333, 0.2000, 1.0, 0.0323, 0.0],
    [0.5455,  0.2, 0.3333, 0.3906, 0.0714, 0.2667, 0.8667, 0.5, 0.0323, 0.0],
    [0.5455,  0.0, 0.0000, 0.6250, 0.0714, 0.4667, 0.7333, 0.0, 0.0161, 0.0],
    [0.4545,  0.4, 0.0000, 0.0000, 0.2143, 0.4667, 0.4667, 0.5, 0.2581, 0.0],
    [0.6364,  0.4, 0.0000, 0.7500, 0.3571, 0.4667, 0.8000, 1.0, 0.5484, 0.0],
    [0.5455,  0.2, 0.3333, 0.5313, 0.0714, 0.6667, 0.4000, 1.0, 0.1290, 1.0],
    [0.8182,  0.4, 0.3333, 0.5313, 0.1429, 0.8667, 0.6000, 1.0, 0.2419, 1.0],
    [1.0000,  0.4, 0.6667, 0.4688, 0.2143, 0.6667, 0.8667, 1.0, 0.4516, 0.0],
    [0.6364,  0.2, 0.3333, 0.5938, 0.0000, 0.5333, 0.6000, 0.5, 0.0645, 0.0],
    [0.8182,  0.4, 0.6667, 0.6875, 0.2143, 0.9333, 0.4667, 1.0, 0.3548, 0.0],
    [0.3636,  0.4, 0.0000, 0.5313, 0.2143, 0.7333, 0.1333, 1.0, 0.2258, 0.0],
    [0.4545,  0.4, 0.0000, 1.0000, 0.0714, 0.8667, 0.2000, 1.0, 0.0806, 1.0],
    [0.6364,  0.4, 0.3333, 0.6563, 0.3571, 0.4667, 0.8000, 0.5, 0.7097, 0.0],
    [0.3636,  0.2, 0.0000, 0.0000, 0.1429, 0.5333, 0.4000, 1.0, 0.2903, 0.0],
    [0.5455,  0.2, 0.0000, 0.9063, 0.0000, 1.0000, 0.2000, 0.0, 0.0484, 0.0],
    [0.5455,  0.2, 0.3333, 0.2188, 0.0714, 0.1333, 1.0000, 0.5, 0.0645, 0.0],
    [0.5455,  1.0, 0.0000, 0.7188, 0.0714, 0.6000, 0.2000, 0.0, 0.1129, 0.0]]

def parseText(filename, leadDeadRows, leadDeadCols):
    """This function takes in the name of a textfile FILENAME, the number of 
    unwanted lines in the file, and the number of unwanted columns in the file
    and returns a matrix of the data stored in FILENAME. FILENAME should be an
    N x M matrix with each element separated by spaces. """
    textMatrix = []
    f = open(filename, 'r')
    accum = 0
    for line in f:
        #So we skip the first few lines of "dead" data
        if(accum < leadDeadRows):
            accum = accum + 1
        else:
            currLine = line.split()
            for i in range(leadDeadCols):
                currLine.pop(0)
            textMatrix.append(currLine)
    return textMatrix

def averageLocation(matrix):
    B = [0] * len(matrix[0])
    for vector in matrix:
        for i in range(len(vector)):
            B[i] = B[i] + vector[i]
    for i in range(len(B)):
        B[i] = B[i] / (len(matrix))
    return B

def getNameOfCereal(vector):
    """The inputted vector should correspond to the vector of a cereal given
    in the starting matrix. """
    cerealNames = ['AllB', 'AllF', 'AppJ', 'CorF', 'CorP', 'Crac', 'Cris', 
                   'Froo', 'FroF', 'FrMW', 'FruB', 'JRCN', 'JRFN', 'MuCB', 
                   'Nut&', 'NGAR', 'NutW', 'Prod', 'RaBr', 'Rais', 'RiKr', 
                   'Smac', 'Spec']
    
    matrix = [
        [0.1818, 0.6, 0.3333, 0.8125, 0.6429, 0.0000, 0.3333, 1.0, 0.9677, 0.0],
        [0.0000,  0.6, 0.0000, 0.4375, 1.0000, 0.0667, 0.0000, 1.0, 1.0000, 0.0],
        [0.5455,  0.2, 0.0000, 0.3906, 0.0714, 0.2667, 0.9333, 0.5, 0.0323, 0.0],
        [0.4545,  0.2, 0.0000, 0.9063, 0.0714, 0.9333, 0.1333, 0.0, 0.0484, 0.0],
        [0.5455,  0.0, 0.0000, 0.2813, 0.0714, 0.4000, 0.8000, 0.5, 0.0000, 0.0],
        [0.5455,  0.4, 1.0000, 0.4375, 0.2857, 0.2000, 0.4667, 1.0, 0.4516, 0.0],
        [0.5455,  0.2, 0.0000, 0.6875, 0.0714, 0.9333, 0.2000, 1.0, 0.0323, 0.0],
        [0.5455,  0.2, 0.3333, 0.3906, 0.0714, 0.2667, 0.8667, 0.5, 0.0323, 0.0],
        [0.5455,  0.0, 0.0000, 0.6250, 0.0714, 0.4667, 0.7333, 0.0, 0.0161, 0.0],
        [0.4545,  0.4, 0.0000, 0.0000, 0.2143, 0.4667, 0.4667, 0.5, 0.2581, 0.0],
        [0.6364,  0.4, 0.0000, 0.7500, 0.3571, 0.4667, 0.8000, 1.0, 0.5484, 0.0],
        [0.5455,  0.2, 0.3333, 0.5313, 0.0714, 0.6667, 0.4000, 1.0, 0.1290, 1.0],
        [0.8182,  0.4, 0.3333, 0.5313, 0.1429, 0.8667, 0.6000, 1.0, 0.2419, 1.0],
        [1.0000,  0.4, 0.6667, 0.4688, 0.2143, 0.6667, 0.8667, 1.0, 0.4516, 0.0],
        [0.6364,  0.2, 0.3333, 0.5938, 0.0000, 0.5333, 0.6000, 0.5, 0.0645, 0.0],
        [0.8182,  0.4, 0.6667, 0.6875, 0.2143, 0.9333, 0.4667, 1.0, 0.3548, 0.0],
        [0.3636,  0.4, 0.0000, 0.5313, 0.2143, 0.7333, 0.1333, 1.0, 0.2258, 0.0],
        [0.4545,  0.4, 0.0000, 1.0000, 0.0714, 0.8667, 0.2000, 1.0, 0.0806, 1.0],
        [0.6364,  0.4, 0.3333, 0.6563, 0.3571, 0.4667, 0.8000, 0.5, 0.7097, 0.0],
        [0.3636,  0.2, 0.0000, 0.0000, 0.1429, 0.5333, 0.4000, 1.0, 0.2903, 0.0],
        [0.5455,  0.2, 0.0000, 0.9063, 0.0000, 1.0000, 0.2000, 0.0, 0.0484, 0.0],
        [0.5455,  0.2, 0.3333, 0.2188, 0.0714, 0.1333, 1.0000, 0.5, 0.0645, 0.0],
        [0.5455,  1.0, 0.0000, 0.7188, 0.0714, 0.6000, 0.2000, 0.0, 0.1129, 0.0]]
    
    for i in range(len(matrix)):
        if vector == matrix[i]:
            return cerealNames[i]
    return "None :("